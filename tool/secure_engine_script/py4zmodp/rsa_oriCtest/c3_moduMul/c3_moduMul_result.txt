*** python for ZMODP *** Modular Multiplication *** start ***
### Given M, X, Y and r = 2^(2n) mod M: Z = X * Y mod M ###

S1---input param start--
input data: RSA-2048

M=0x
 a1ce6bc1fb3fca85f4360f6dec6d743d3da0c568026f74f922f78f20e0d270befcb12f24e533e8395d144cd7e621aa9885b3382083bcd1ae19b017bc01bf84ae5f66da8ba4d88005ccd8ac444a1fe6a5988d4ef8b39635a105211a6b31cc9db1a523f1f62c6051e9280c36a45ba513990ed8225448d6cc830185b93f7f6340a639b83d65e72c5225101edd52ebfa9223077764d6a034dc4b68e5ce4d42bd874a6f2e4ba5dc9ab7aae3c5294d08d60d7269fcc11d269a96eba73148db68fc89051f755d9c9fcb2360d0d119c638e504323ce6672aebe95288fa13e42c5bd6ffe94dd5ecfbe08adece36fc17cbfb24d8d4af83680870acb40cba0eed84e66edc99
X=0x
 11111111111111111111111111111111222222222222222222222222222222223333333333333333333333333333333344444444444444444444444444444444555555555555555555555555555555556666666666666666666666666666666677777777777777777777777777777777
Y=0x
 ffffffffffffffffffffffffffffffffeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeddddddddddddddddddddddddddddddddccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9999999999999999999999999999999988888888888888888888888888888888

---input param end--


S2......running......
        .............done


S3---output result start--

ResultZ=0x
 1111111111111111111111111111111120fedcba987654320fedcba9876543210da740da740da740da740da740da740db4e81b4e81b4e81b4e81b4e81b4e81b4f49f49f49f49f49f49f49f49f49f49f4aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab4e81b4e81b4e81b4e81b4e81b4e81b468acf13579be02468acf13579be02468a4fa4fa4fa4fa4fa4fa4fa4fa4fa4fa4f37c048d159e26af37c048d159e26af37654320fedcba987654320fedcba98764fa4fa4fa4fa4fa4fa4fa4fa4fa4fa4fa1907f6e5d4c3b2a1907f6e5d4c3b2a18e38e38e38e38e38e38e38e38e38e38e37c048d159e26af37c048d159e26af38

---output result end--

*** python for ZMODP *** Modular Multiplication *** end ***
