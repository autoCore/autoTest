# -*- coding: utf-8 -*-
# coding: utf-8
import Crypto

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m
		
		
'''
TODO:RSA-2048
 * N:  A1CE6BC1FB3FCA85F4360F6DEC6D743D3DA0C568026F74F922F78F20E0D270BEFCB12F24E533E8395D144CD7E621AA9885B3382083BCD1AE19B017BC01BF84AE5F66DA8BA4D88005CCD8AC444A1FE6A5988D4EF8B39635A105211A6B31CC9DB1A523F1F62C6051E9280C36A45BA513990ED8225448D6CC830185B93F7F6340A639B83D65E72C5225101EDD52EBFA9223077764D6A034DC4B68E5CE4D42BD874A6F2E4BA5DC9AB7AAE3C5294D08D60D7269FCC11D269A96EBA73148DB68FC89051F755D9C9FCB2360D0D119C638E504323CE6672AEBE95288FA13E42C5BD6FFE94DD5ECFBE08ADECE36FC17CBFB24D8D4AF83680870ACB40CBA0EED84E66EDC99
 * E:  010001
 * D:  81B0C31C3336F92C0F06F9AD00B0E65763BB261EECBCCB44196BD593E3BFA8D0DC1764932D0742DE1FA5F2C5A5D65C376E0AAD351A82508A3C5AB15B67074BE0BBE4E3CCC3EF2805FE1FB94BEF21CCABF42F6719DE4FCA626A8B12F2D2728FFEE03F8463ED43B2C3AFEEC22950AF6A9AE69404480C2DE6B42697395914D0C7F26896D571A9BF422E2EC42B72D7CF9151ADF3061639B1C809D87049261A85BAE47B841EDF073541A28DA6EDC1FF20954D81F4F1CDD52A82A79ACD37CACFF47BD44B4999C0DE5316BE0A598734A9158E1AA426694D4DE9795CA5D7C0326ACCD20E415B5E76E8A6D557E5BC456667D20ECA8361AF41267F5028ADDE98D92F802DD1
 * P:  F36993E3A4F890C0ADF100C2F25E37A8944D5482CA84F68EFCDB2BB26BCDD61F346019F3E4D7815FDF010369C006CF016EA7178ED514F268F12A239B18AA473239A650B50BBA4CDC1ACB44FDE196BC0DD7A23BF2DAE85F3071448C1C6D1F314EE2D94FA8F626F4670CB558705A34C5AED3DF9C1CD1C72415567B5ADDBE5BDA2D
 * Q:  AA2C7FAE9A04A388F09C3C4ADF5870CAF92E9D8E2D2A96CAC32DD6A5A4100A52D829B3B0AE4B0D4752B7287B1BEBFB181182FF2CB51102CC2FC24F30021D667440F7D4E6A46D2306DDFA52781CB23006F2DB1451E01BE651817E2CF98DABBDAFD97C4596FE300D48AF970FE4E142C66BEEE3A1A4C2E0214DCA849CD33396AB9D
 * DP: 0F256CAC67A187F055627FB7A1B937216848FF8F3BE6D628C39727BAEC765C7288A1CA3BA0EBC003252F3CF5219BCAD9BDF6EBC25983FA29898823BB0CE7DB92468010D993273E8D1BA5B65F4DE041476339971D5F7DC21E938DBE622E7018735E2E4384B1FC6E8CD2FF9DC72FF5C4AF4243D1C50150B0F01AF78609F24468E9
 * DQ:  9867BDFA5B89E8044EA93DFE3844F6CF71976417DF2F935908B056DA8632AF6C3E982A8C03ACC7B9A6C4CE86631D5705D9391EDBA55614D155BC8A3B0EC9D1E63001453542F1533B65363901C581782DE0F6801E4BBDF0E9F235548633712A33016EA0CC77DE0527A1CA82BB935AC0660DCEE407B15815BB9BB264D96A0C78A9
 * QP:  CCCDC1DF89688DE73DF30D6CA0DB8BF1556AEF255F32FC45C54ACC7FD2DC77FE6C206B4B694B49AD8B9FF766B0E9CBB5EF31142DE8368CAEB48E0736DB74CDD1A89121A554BC63A674406DE2860961102ACF89B29244A82EA99D5462914A1CD579018EE8FA23CF6F0F18681D3CA7A6F0FC607AE1C53AB3F7A3520C7C8F7BFFA4
'''

### case5-Modular Inverse
# RSA-1024

#TODO: rsa's P
M=0xF36993E3A4F890C0ADF100C2F25E37A8944D5482CA84F68EFCDB2BB26BCDD61F346019F3E4D7815FDF010369C006CF016EA7178ED514F268F12A239B18AA473239A650B50BBA4CDC1ACB44FDE196BC0DD7A23BF2DAE85F3071448C1C6D1F314EE2D94FA8F626F4670CB558705A34C5AED3DF9C1CD1C72415567B5ADDBE5BDA2D

### TODO: X is random?
X=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9999999999999999999999999999999988888888888888888888888888888888

#old-rsa1024
Y=pow(2,1024*2)%M
'''

[注意] 新python公式，与Y无关了。 而aquila的zmodp模块，还是与Y有关系的，注意要DWORD换顺序.!!!

Y=pow(2,1024*2)%M
原来计算出Y是这给:421c2b41b9f7e69cc41ae661af209b5f06dcc553959969bdcdc577a88d9d4867606fe0b87548edadb6e847d08d694f70129b3a4546fdc9b511a119e5b8935c0ea9394894720b055daa5589a03118c20e8ff4ecc5193d6b4b8e29c6cf9c68c00c0a3ffafea4d10e8a3f1ddeba0aaeefb1e03fc984c4c369e18f1920795a85702a
要转化为这个，设置在python中使用：#Y=0x5a85702a8f192079c4c369e1e03fc9840aaeefb13f1ddebaa4d10e8a0a3ffafe9c68c00c8e29c6cf193d6b4b8ff4ecc53118c20eaa5589a0720b055da9394894b8935c0e11a119e546fdc9b5129b3a458d694f70b6e847d07548edad606fe0b88d9d4867cdc577a8959969bd06dcc553af209b5fc41ae661b9f7e69c421c2b41
'''

#Y=pow(2,2048*2)%M

print ("")
print ("...doing...,....keep waiting...")
print ("")
 
ResultZ=modinv(X,M) 

''' 
output
'''

print ("*** python for ZMODP *** Modular Inverse *** start ***")
print ("### Given M, X and  r = 2^(2n) mod M. compute Z = X^(-1) mod M ###")
print ("")
print ("S1---input param start--")
print ("input data: RSA-1024")
print ("")

#S1: input param
print ("M=0x")
print (" %x" %M)
print ("X=0x")
print (" %x" %X)
print ("(Y is pre-compu M result). Y=0x")
print (" %x" %Y)

print ("")
print ("---input param end--")
print ("")
print ("")
print ("S2......running......")
print ("        .............done")
print ("")
print ("")
print ("S3---output result start--")
print ("")

#S3: result 
print ("ResultZ=0x")
print (" %x" %ResultZ)

print ("")
print ("---output result end--")
print ("")
print ("*** python for ZMODP *** Modular Inverse *** end ***")



