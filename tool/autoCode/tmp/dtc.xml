<?xml version="1.0" encoding="UTF-8"?>
	<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
		<spirit:vendor>org.example</spirit:vendor>
		<spirit:library>example_lib</spirit:library>
		<spirit:name>dtc</spirit:name>
		<spirit:version>example_version</spirit:version>
<spirit:memoryMaps>
<spirit:memoryMap>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>RDL Example Registers</spirit:displayName>
<spirit:addressBlock>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>ASR Module Registers</spirit:displayName>
<spirit:description>This address map contains some example registers to show how RDL can be utilized in various situations.</spirit:description>
<spirit:baseAddress>0xD4285000</spirit:baseAddress>
<spirit:range>0x2000</spirit:range>
<spirit:width>32</spirit:width>
<spirit:usage> </spirit:usage>
<spirit:volatile>true</spirit:volatile>
<spirit:register>
<spirit:name>DTC_DOCR_CSA0_10</spirit:name>
<spirit:description>DTC Chain Start Address Register 0/1</spirit:description>
<spirit:addressOffset>0x00</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_DOCR_CSA0_11</spirit:name>
<spirit:description>DTC Chain Start Address Register 0/1</spirit:description>
<spirit:addressOffset>0x8</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>CHAIN0_START_ADDR</spirit:name>
<spirit:description>bit sample  address of the first descriptor in the chain. can point to f8 or f9 descriptor – depends on f8/f9b flag.  for channel 0/1</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_DOCR_CTRL0_10</spirit:name>
<spirit:description>DTC Control Register 0/1</spirit:description>
<spirit:addressOffset>0x4</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_DOCR_CTRL0_11</spirit:name>
<spirit:description>DTC Control Register 0/1</spirit:description>
<spirit:addressOffset>0xC</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>FIFO_OUT_AF_SIZE</spirit:name>
<spirit:description>fifo_out almost full threshold  defines the number of words in the output fifo above which dtc stops fetching data</spirit:description>
<spirit:bitOffset>25</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FIFO_OUT_AE_SIZE</spirit:name>
<spirit:description>fifo_out almost empty threshold  defines the number of words in the output fifo below which dtc fetches more data</spirit:description>
<spirit:bitOffset>21</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FIFO_IN_AF_SIZE</spirit:name>
<spirit:description>fifo_in almost full threshold  defines the number of words in the input fifo above which dtc stops fetching data</spirit:description>
<spirit:bitOffset>17</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FIFO_IN_AE_SIZE</spirit:name>
<spirit:description>fifo_in almost empty threshold  defines the number of words in the input fifo below which dtc fetches more data</spirit:description>
<spirit:bitOffset>13</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CHN_START</spirit:name>
<spirit:description>start processing configuration  1 = start  0 = do not start</spirit:description>
<spirit:bitOffset>5</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DONEINDICATION</spirit:name>
<spirit:description>done indication  1 = indicates cee has occurred  0 = indicates cee has not occurred  this bit is cleared by hardware when dtc starts to process the chain and is set to 1 when chain processing has completed.</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CHN_CEE</spirit:name>
<spirit:description>chain end event  0x0 = no action – dtc continues to operate as usual  0x1 = cpu interrupt  0x2 = trigger edch tx-path  0x3 = cpu interrupt and trigger edch tx-path  regardless of the mode used above, the done bit is set by dtc once it is done.</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CHN_F8_F9</spirit:name>
<spirit:description>f8/f9 selector  0 = f9  1 = f8</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CHN_DIR</spirit:name>
<spirit:description>direction  this field defines the direction of data (for cipher).  0 = ul  1 = dl</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_DOCR_SW_BYPASS</spirit:name>
<spirit:description>DTC Software Bypass Register</spirit:description>
<spirit:addressOffset>0X10</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>BNDRY_EN</spirit:name>
<spirit:description>boundary enable  control of dtc special handling of memory accesses that cross the 4k boundary.  0 = enable boundary handling  1 = disable boundary handling</spirit:description>
<spirit:bitOffset>12</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CK_BE_LE_SEL</spirit:name>
<spirit:description>ciphering key big/little endian selection  this field selects the ck data endianity.  0 = little endian  1 = big endian</spirit:description>
<spirit:bitOffset>11</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SW_OVR</spirit:name>
<spirit:description>software override  0 = dtc clocks according to the &lt;hardware enable&gt; field  1 = dtc clocks are always on</spirit:description>
<spirit:bitOffset>10</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>HW_EN</spirit:name>
<spirit:description>hardware enable  0 = disable automatic control of dtc clocks  1 = enable clocks activation automatically</spirit:description>
<spirit:bitOffset>9</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TEST_EN</spirit:name>
<spirit:description>test mux enable</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TEST_MUX_SEL</spirit:name>
<spirit:description>test mux selection  this field is used to configure the dtc test mux.</spirit:description>
<spirit:bitOffset>5</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EHT</spirit:name>
<spirit:description>edch hardware trigger  0 = don’t generate hardware trigger / clear existing trigger  1 = generate a hardware trigger to edch hardware  generating a trigger involves 2 writes to this bit: first write 0 to clear eht and then write 1 to generate the trigg</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EHT_EN</spirit:name>
<spirit:description>edch hardware trigger enable  0 = eht disabled, edch hardware is triggered by dtc (depending upon the cee configuration) when processing a chain is complete  1 = eht enabled, the dtc generates a hardware trigger to the e-dch encoder when 1 is written to eht</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SWM</spirit:name>
<spirit:description>software direct access mode  when this mode is on, software can write to the internal dtc descriptor registers and fifos. the dtc operates as usual while the dtc’s dma operation is bypassed by software read/writes.  0 = off  1 = on</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SSC</spirit:name>
<spirit:description>single step continue  0 = don’t continue  1 = continue  after handling each descriptor, the dtc stops automatically and generates the cee. to continue processing with the next descriptor, set this bit to 1.  the dtc hardware resets this bit each time it starts to process a new descriptor.</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SSM</spirit:name>
<spirit:description>single step mode  if this mode is activated, the dtc generates the cee after handling each descriptor in the chain (used mainly for software debug mode).  0 = ssm off  1 = ssm on</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_NDP</spirit:name>
<spirit:description>F8 Next Descriptor Pointer Register</spirit:description>
<spirit:addressOffset>0X20</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTCCR_NDP</spirit:name>
<spirit:description>next descriptor pointer  f8_ndp pointer to the next descriptor – assumes that the descriptors are 256-bit aligned.  default = 0, alignment = 256</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_SA</spirit:name>
<spirit:description>F8 Source Address Register</spirit:description>
<spirit:addressOffset>0X24</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTTCR_SA80</spirit:name>
<spirit:description>f8 source address  f8_sa pointer to the source data address  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_DA</spirit:name>
<spirit:description>F8 Destination Address Register</spirit:description>
<spirit:addressOffset>0X28</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTTCR_DA</spirit:name>
<spirit:description>f8 destination address  f8_da pointer to the destination address  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_CONTROL</spirit:name>
<spirit:description>F8 Control Register</spirit:description>
<spirit:addressOffset>0X2C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F8_RCS</spirit:name>
<spirit:description>f8 retain cipher state  this flag indicates if the cipher state should be retained between configurations.  1 = retain state  0 = do not retain state  always clear this bit for the last descriptor in a chain (pointing to null).  set this bit for a descriptor in which the cipher state should be retained (the first descriptor that is not in retain state should have f8_rcs = 0).  if rcs is set, software must send the same cipher configuration parameters as in the first descriptor.  default = 0</spirit:description>
<spirit:bitOffset>30</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_CB</spirit:name>
<spirit:description>f8 cipher bypass  this flag indicates if the cipher is to be bypassed or not. in bypass mode, the bits are passed from source to destination without ciphering.  1 = cipher bypass on  0 = cipher bypass off (cipher data)</spirit:description>
<spirit:bitOffset>29</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_CONT</spirit:name>
<spirit:description>f8 continuous output  this flag indicates if the continuous output mode is operating. in this mode, the f8_obo and destination address fields are ignored, and the dtc continues to write the output stream from the location it stopped in previous descriptor (address and bit).  1 = continue  0 = don’t continue  default = 0</spirit:description>
<spirit:bitOffset>28</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_CO</spirit:name>
<spirit:description>f8 cipher offset  this field indicates the number of bits that are passed from source to destination without passing ciphering.  the following values are allowed:  0x0 = no ciphering offset  0x1 = 4-bit ciphering offset  0x2 = 8-bit ciphering offset  0x3 = 12-bit ciphering offset  0x4 = 16-bit ciphering offset  0x5 = 20-bit ciphering offset  0x6 and 0x7 = reserved  default = 0x0</spirit:description>
<spirit:bitOffset>24</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_BEARER</spirit:name>
<spirit:description>f8 radio bearer  radio bearer id parameter for f8  range [1..32]  this value minus 1 is used as bearer in the ciphering algorithm (input to kasumi algorithm is 5 bit [0..31]).   default = 0</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_LEN</spirit:name>
<spirit:description>f8 total bit length  including cipher offset bits, not including the header data size  range: 1 - 20000 bit  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_HEADER_DATA</spirit:name>
<spirit:description>F8 Header Register</spirit:description>
<spirit:addressOffset>0X30</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F8_HDR_SIZE</spirit:name>
<spirit:description>f8 header size  this field indicates the size of the header data in bits.  0x0 = indicates not to insert any header  0x1 = 4  0x2 = 6  0x3 = 8  0x4 = 12  0x5 = 14  0x6 = 16  0x7 = 20  0x8 = 22  0x9 to 0xf = reserved  default = 0</spirit:description>
<spirit:bitOffset>28</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_HDR_DATA</spirit:name>
<spirit:description>f8 total bit length  including cipher offset bits, not including the header data size  range: 1 - 20000 bit  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>23</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_BIT_OFFSET</spirit:name>
<spirit:description>F8 Bit Offset Register</spirit:description>
<spirit:addressOffset>0X34</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F8_IBO</spirit:name>
<spirit:description>f8 input bit offset  range 0 – 65535  default = 0</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>F8_OBO</spirit:name>
<spirit:description>f8 output bit offset  range 0 – 65535  f8_obo range is limited to value of 0..7 when f8_cont = 1</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_COUNT_C</spirit:name>
<spirit:description>F8 Count C Register</spirit:description>
<spirit:addressOffset>0X38</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F8_COUNTC</spirit:name>
<spirit:description>f8 count c  parameter for cipher.  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F8_DTCCR_CK_ADDR</spirit:name>
<spirit:description>F8 CK Address Register</spirit:description>
<spirit:addressOffset>0X3C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F8_CK_ADDR</spirit:name>
<spirit:description>f8 ck address  this field is used for the address of the ciphering key (ck). the dtc fetches the ck from this address if it does not have a ck from this memory already stored.  the ck must be aligned in memory to 256 bit.  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_NDP</spirit:name>
<spirit:description>F9 Next Descriptor Pointer Register</spirit:description>
<spirit:addressOffset>0X20</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_SA</spirit:name>
<spirit:description>F9 Source Address Register</spirit:description>
<spirit:addressOffset>0X24</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTTCR_SA159</spirit:name>
<spirit:description>f9 source address  f9_sa pointer to the source data address  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_DA</spirit:name>
<spirit:description>F9 Destination Address Register</spirit:description>
<spirit:addressOffset>0X28</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F9_LEN</spirit:name>
<spirit:description>f9 total bit length  range 0.. 524287  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>19</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_Control</spirit:name>
<spirit:description>F9 Control Register</spirit:description>
<spirit:addressOffset>0X2C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F9_FRESH</spirit:name>
<spirit:description>f9 fresh parameter  f9 fresh parameter for cipher  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_HEADER_DATA</spirit:name>
<spirit:description>F9 Header Data Register</spirit:description>
<spirit:addressOffset>0X30</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F9_COUNTI</spirit:name>
<spirit:description>f9 count-i parameter  f9_counti count-i parameter for cipher  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_BIT_OFFSET</spirit:name>
<spirit:description>F9 Bit Offset Register</spirit:description>
<spirit:addressOffset>0X34</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F9_IK_ADDR</spirit:name>
<spirit:description>f9 ik address  this field is used for the address of the integrity key (ik).  the dtc fetches the ik from this address if it does not have an ik of this memory already stored.  the ik must be aligned in memory to 256 bit.  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_F9_DTCCR_COUNT_C</spirit:name>
<spirit:description>F9 Count C Register</spirit:description>
<spirit:addressOffset>0X38</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>F9_IBO</spirit:name>
<spirit:description>f9 input bit offset  range 0 - 65535  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_CKIK_1</spirit:name>
<spirit:description>Ciphering Key Register 1</spirit:description>
<spirit:addressOffset>0X50</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_CKIK_1</spirit:name>
<spirit:description>dtc_ckik_1  bits [31:0] of ck/ik  default = 0x00000000</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_CKIK_2</spirit:name>
<spirit:description>Ciphering Key Register 2</spirit:description>
<spirit:addressOffset>0X54</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_CKIK_2</spirit:name>
<spirit:description>dtc_ckik_2  bits [63:32] of ck/ik  default = 0x00000000</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_CKIK_3</spirit:name>
<spirit:description>Ciphering Key Register 3</spirit:description>
<spirit:addressOffset>0X58</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_CKIK_3</spirit:name>
<spirit:description>dtc_ckik_3  bits [95:64] of ck/ik  default = 0x00000000</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_CKIK_4</spirit:name>
<spirit:description>Ciphering Key Register 4</spirit:description>
<spirit:addressOffset>0X5C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_CKIK_4</spirit:name>
<spirit:description>dtc_ckik_4  bits [127:96] of ck/ik  default = 0x00000000</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_DISR_REG</spirit:name>
<spirit:description>DTC Interrupt Status Register</spirit:description>
<spirit:addressOffset>0X60</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>FOFFIFOOUTFULL</spirit:name>
<spirit:description>fof fifo out full  to be used in software mode to indicate to software that the output fifo is full.  dtc generates an interrupt on the active channel (channel 0 or 1) once the output fifo is full and sets this bit to high, and then this bit will be set to low by dtc once the fifo is not empty.  in software mode, the software should fill the input fifo (full size) and then wait for fof interrupt to read the results. if the block size is smaller than the input fifo size, software should pad with ‘0’ to reach input fifo size.  default = 0</spirit:description>
<spirit:bitOffset>5</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>MP_ERR1</spirit:name>
<spirit:description>mp_err1  error in memory protection on channel 1  default = 0</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>MP_ERR0</spirit:name>
<spirit:description>mp_err0  error in memory protection on channel 0  default = 0</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>MERR1</spirit:name>
<spirit:description>merr1  error on dtc master bus while processing channel 1  default = 0</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>MERR0</spirit:name>
<spirit:description>merr0  error on dtc master bus while processing channel 0  default = 0</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SERR</spirit:name>
<spirit:description>serr  error on dtc slave bus.  default = 0</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MAC_I0_REG0</spirit:name>
<spirit:description>DTC_MACI_Ch0/1 Register</spirit:description>
<spirit:addressOffset>0x70</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MAC_I0_REG1</spirit:name>
<spirit:description>DTC_MACI_Ch0/1 Register</spirit:description>
<spirit:addressOffset>0x74</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_MAC_I0_1_REG</spirit:name>
<spirit:description>dtc_mac_i0/1_reg  32-bit result of f9 for channel 0/1</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MPR_HIGHn_ADDR0</spirit:name>
<spirit:description>High Address Range Registers</spirit:description>
<spirit:addressOffset>0x80</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MPR_HIGHn_ADDR1</spirit:name>
<spirit:description>High Address Range Registers</spirit:description>
<spirit:addressOffset>0x88</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MPR_HIGHn_ADDR2</spirit:name>
<spirit:description>High Address Range Registers</spirit:description>
<spirit:addressOffset>0x90</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_MPR0_HIGH</spirit:name>
<spirit:description>dtc_mprn_high  32-bit address indicating high address range</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MPR_LOWn_ADDR0</spirit:name>
<spirit:description>Low Address Range Registers</spirit:description>
<spirit:addressOffset>0x84</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MPR_LOWn_ADDR1</spirit:name>
<spirit:description>Low Address Range Registers</spirit:description>
<spirit:addressOffset>0x8C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTC_MPR_LOWn_ADDR2</spirit:name>
<spirit:description>Low Address Range Registers</spirit:description>
<spirit:addressOffset>0x94</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_MPR0_LOW</spirit:name>
<spirit:description>dtc_mprn_low  32 bit address indicating low address range</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_READ</spirit:name>
<spirit:description>DTC Read Register</spirit:description>
<spirit:addressOffset>0XA0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DRAR</spirit:name>
<spirit:description>read address  this field contains the address that the dtc attempted to read at the time the error interrupt (mpr or bus error) occurred.  0x00000000 indicates that the error was not caused by read.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_WRITE</spirit:name>
<spirit:description>DTC Write Register</spirit:description>
<spirit:addressOffset>0XA4</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DWAR</spirit:name>
<spirit:description>write address  this field contains the address that the dtc attempted to write to at the time the error interrupt (mpr or bus error) occurred.  0x00000000 indicates that the error was not caused by write.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_FIFO_READ</spirit:name>
<spirit:description>DTC FIFO Read Address Register</spirit:description>
<spirit:addressOffset>0XC0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_FIFO_READ</spirit:name>
<spirit:description>fifo read address</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTC_FIFO_WRITE</spirit:name>
<spirit:description>DTC FIFO Write Address Register</spirit:description>
<spirit:addressOffset>0XC0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DTC_FIFO_WRITE</spirit:name>
<spirit:description>fifo write address</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
</spirit:addressBlock>
</spirit:memoryMap>
</spirit:memoryMaps>
</spirit:component>