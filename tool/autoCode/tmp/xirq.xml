<?xml version="1.0" encoding="UTF-8"?>
	<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
		<spirit:vendor>org.example</spirit:vendor>
		<spirit:library>example_lib</spirit:library>
		<spirit:name>xirq</spirit:name>
		<spirit:version>example_version</spirit:version>
<spirit:memoryMaps>
<spirit:memoryMap>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>RDL Example Registers</spirit:displayName>
<spirit:addressBlock>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>ASR Module Registers</spirit:displayName>
<spirit:description>This address map contains some example registers to show how RDL can be utilized in various situations.</spirit:description>
<spirit:baseAddress>0xD0231000</spirit:baseAddress>
<spirit:range>0x2000</spirit:range>
<spirit:width>32</spirit:width>
<spirit:usage> </spirit:usage>
<spirit:volatile>true</spirit:volatile>
<spirit:register>
<spirit:name>SWIENABLE</spirit:name>
<spirit:description>Software Interrupt xIRQ Enable Set Register</spirit:description>
<spirit:addressOffset>0X0000</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SWI_ENB_SET</spirit:name>
<spirit:description>software interrupt enable  each bit defines the mask status of the corresponding swi xirq number.  0 = no effect  1 = corresponding swi is enabled  reading from this register reflects the mask status of the corresponding swi xirq number.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>RIENABLE</spirit:name>
<spirit:description>Register Interrupt xIRQ Enable Set Register</spirit:description>
<spirit:addressOffset>0X0004</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RI_ENB_SET</spirit:name>
<spirit:description>register interrupt enable set  each bit defines the mask status of the corresponding ri xirq number.  0 = no effect  1 = corresponding ri is enabled  reading from this register reflects the mask status of the corresponding ri xirq number.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>8</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>XSWIENABLE</spirit:name>
<spirit:description>Cross-Assert Interrupt xIRQ Enable Set Register</spirit:description>
<spirit:addressOffset>0X0008</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>XSWI_ENB</spirit:name>
<spirit:description>cross-assert interrupt enable set  defines the mask status of the corresponding cross-assert xirq number.  0 = corresponding xswi is masked  1 = corresponding xswi is enabled  reading from this register reflects the mask status of the corresponding cross-assert xirq number.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>EIRQENABLE</spirit:name>
<spirit:description>Error Interrupt xIRQ Enable Set Register</spirit:description>
<spirit:addressOffset>0X000C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>EI_ENB_SET</spirit:name>
<spirit:description>error interrupt enable set  each bit defines the mask status of the corresponding ei xirq number.  0 = no effect  1 = corresponding ei is enabled  reading from this register reflects the mask status of the corresponding ei xirq number.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>HWIENABLEn0</spirit:name>
<spirit:description>Hardware Interrupt Bank n xIRQ Enable Set Register</spirit:description>
<spirit:addressOffset>0x0020</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>HWIENABLEn1</spirit:name>
<spirit:description>Hardware Interrupt Bank n xIRQ Enable Set Register</spirit:description>
<spirit:addressOffset>0x002C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>HWI_N_ENB_SET</spirit:name>
<spirit:description>hardware interrupt bank n enable set  each bit defines the mask status of the corresponding hwi xirq number + 16*n. (where n = 0, 1, or 2 for mirq and n = 0, 1, 2, or 3 for airq)  0 = no effect  1 = corresponding hwi is enabled  reading from this register reflects the mask status of the corresponding hwi xirq number.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SWIENABLECLR</spirit:name>
<spirit:description>Software Interrupt xIRQ Enable Clr Register</spirit:description>
<spirit:addressOffset>0X0040</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SWI_ENB_CLR</spirit:name>
<spirit:description>software interrupt enable clear  each bit defines the mask status of the corresponding swi xirq number.  0 = no effect  1 = corresponding swi is masked  writing 1 sets the corresponding bit in the software interrupt xirq enable set register to 0.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>RIENABLECLR</spirit:name>
<spirit:description>Register Interrupt xIRQ Enable Clr Register</spirit:description>
<spirit:addressOffset>0X0044</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RI_ENB_CLR</spirit:name>
<spirit:description>register interrupt enable clear  each bit defines the mask status of the corresponding ri xirq number.  0 = no effect  1 = corresponding ri is masked  writing 1 sets the corresponding bit in the register interrupt xirq enable set register to 0.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>8</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>EIRQENABLECLR</spirit:name>
<spirit:description>Error Interrupt xIRQ Enable Clr Register</spirit:description>
<spirit:addressOffset>0X0048</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>EI_ENB_CLR</spirit:name>
<spirit:description>error interrupt enable clear  each bit defines the mask status of the corresponding ei xirq number.  0 = no effect  1 = corresponding ei is masked  writing 1 sets the corresponding bit in the error interrupt xirq enable set register to 0.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>HWIENABLECLRn0</spirit:name>
<spirit:description>Hardware Interrupt Bank n xIRQ Enable Clr Register</spirit:description>
<spirit:addressOffset>0x0060</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>HWIENABLECLRn1</spirit:name>
<spirit:description>Hardware Interrupt Bank n xIRQ Enable Clr Register</spirit:description>
<spirit:addressOffset>0x0064</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>HWI_N_ENB_CLR</spirit:name>
<spirit:description>hardware interrupt bank n enable clear  each bit defines the mask status of the corresponding hwi xirq number + 16*n. ((n = 0, 1, or 2 for mirq and n = 0, 1, 2, or 3 for airq)  0 = no effect  1 = corresponding hwi is masked  writing 1 sets the corresponding bit in the hardware interrupt bank n xirq enable set register to 0.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>CIP</spirit:name>
<spirit:description>Current Interrupt Priority Register</spirit:description>
<spirit:addressOffset>0X0080</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>CIP</spirit:name>
<spirit:description>current interrupt priority  when any irq is active, this register reads back the priority level of highest-priority interrupt, in the range 0x0000 (highest) to 0x000f (lowest).  when no irqs are active, this register reads back 0x000f.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>CIN</spirit:name>
<spirit:description>Current Interrupt Number Register</spirit:description>
<spirit:addressOffset>0X0084</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>CIN</spirit:name>
<spirit:description>current interrupt number  when no irq is active, this register reads back 0x007f.  when any irq is active, this register reads back the number of the highest-priority interrupt, in the range 0x0000 to t, where:  t = 16 + 1+ 8 + 3 + n(hwi)-1  (16 swi, 1 xswi, 8 ri, 3 eirq, and gnh hwis).</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>7</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>AIM</spirit:name>
<spirit:description>Active Interrupt Mask Register</spirit:description>
<spirit:addressOffset>0X0088</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>AIM</spirit:name>
<spirit:description>active interrupt mask  returns a 16-bit value when read. each set bit indicates that there is an active interrupt at the corresponding priority level, with bit zero indicating level 0 (highest).  the highest-level bit set is used as a priority mask, preventing interrupts at lower priority from passing through onto the nirq output. it can be written directly, however, both read and write accesses are intended for test purposes only.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SYSREG</spirit:name>
<spirit:description>System Register</spirit:description>
<spirit:addressOffset>0X008C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>IRQCTRL_RST</spirit:name>
<spirit:description>irqctrl reset flag  this flag must be cleared for normal operation.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SWICARRYSTATUS</spirit:name>
<spirit:description>Software Interrupt Carry Status Register</spirit:description>
<spirit:addressOffset>0X0090</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SWI_CS</spirit:name>
<spirit:description>software interrupt carry status  each bit, when set, indicates an overflow or underflow of the corresponding swi counter. all bits are ored to generate an internal error swi_eirq, with curintnum = 27  when this register is written to, any bits set in the data value clear the corresponding bit(s) in the register, and clear to zero the corresponding swi counter.  it may be used to clear the counter(s) even if the carry flag is (are) not set.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>RICARRYSTATUS</spirit:name>
<spirit:description>Register Interrupt Carry Status Register</spirit:description>
<spirit:addressOffset>0X0094</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RI_CS</spirit:name>
<spirit:description>register interrupt carry status  this bit, when set, indicates an overflow of the ri register. all bits are ored to generate an internal error ri_eirq, with curintnum = 26.  when this register is written to, any bits set in the data value clear the corresponding bit(s) in the register, and clear to zero the corresponding ri register bit(s). it may be used to clear the ri register bit(s) even if the carry flags are not set.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>8</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>XSWICARRYSTATUS</spirit:name>
<spirit:description>Cross-Assertion Interrupt Carry Status Register</spirit:description>
<spirit:addressOffset>0X0098</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>XSWI_CS</spirit:name>
<spirit:description>cross-assertion interrupt carry status  this bit, when set, indicates an overflow or underflow of the xswi counter. this bit is used to generate an internal error xswi_eirq, with curintnum = 25  when this register is written to, any bits set in the data value clear the corresponding bit(s) in the register, and clear to zero the corresponding xswicounter.  it may be used to clear the counter(s) even if the carry flag is not set.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>CINVALUE</spirit:name>
<spirit:description>Current Interrupt Number Value Register</spirit:description>
<spirit:addressOffset>0X009C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>CINV</spirit:name>
<spirit:description>current interrupt number value  when no irq is active, this register reads back 0x007f.  when any irq is active, this register reads back the number of the highest-priority interrupt, in the range 0x0000 to t, where:  t = [16 + 8+ 1 + 3 + n(hwi)] - 1  (16 swi, 8 ri, 1 xswi, 3 eirq, and gnh hwis)</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>7</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SWIPRIORITYn0</spirit:name>
<spirit:description>Software Interrupt n Priority Register</spirit:description>
<spirit:addressOffset>0x00A0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>SWIPRIORITYn1</spirit:name>
<spirit:description>Software Interrupt n Priority Register</spirit:description>
<spirit:addressOffset>0x00DC</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SWIPN</spirit:name>
<spirit:description>software interrupt n priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>RIPRIORITYn0</spirit:name>
<spirit:description>Register Interrupt n Priority Register</spirit:description>
<spirit:addressOffset>0x00E0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>RIPRIORITYn1</spirit:name>
<spirit:description>Register Interrupt n Priority Register</spirit:description>
<spirit:addressOffset>0x00FC</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RIPN</spirit:name>
<spirit:description>register interrupt n priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>XSWIPRIORITY</spirit:name>
<spirit:description>Cross-Assert Interrupt Priority Register</spirit:description>
<spirit:addressOffset>0X0120</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>XSWIP</spirit:name>
<spirit:description>cross-assert interrupt priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>EXSWIPRIORITY</spirit:name>
<spirit:description>Cross-Assert Error Interrupt Priority Register</spirit:description>
<spirit:addressOffset>0X0140</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>XSWI_EIRQP</spirit:name>
<spirit:description>cross-assert error interrupt priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ERIPRIORITY</spirit:name>
<spirit:description>Register Error Interrupt Priority Register</spirit:description>
<spirit:addressOffset>0X0144</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RI_EIRQP</spirit:name>
<spirit:description>register error interrupt priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ESWPRIORITY</spirit:name>
<spirit:description>Software Error Interrupt Priority Register</spirit:description>
<spirit:addressOffset>0X0148</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SWI_EIRQP</spirit:name>
<spirit:description>software error interrupt priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>HWPRIORITYn0</spirit:name>
<spirit:description>Hardware Interrupt n Priority Register</spirit:description>
<spirit:addressOffset>0x0200</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>HWPRIORITYn1</spirit:name>
<spirit:description>Hardware Interrupt n Priority Register</spirit:description>
<spirit:addressOffset>0x02C0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>HWIPN</spirit:name>
<spirit:description>hardware interrupt n priority  defines the priority level, 0 to 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>MIRQ_DUMMY_READ</spirit:name>
<spirit:description>MIRQ Dummy Read Register</spirit:description>
<spirit:addressOffset>0X0300</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>SWICOUNTn</spirit:name>
<spirit:description>Software Interrupt n Count Register</spirit:description>
<spirit:addressOffset>0X0400</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SWICN</spirit:name>
<spirit:description>software interrupt n count  number of pending swi 0 irqs from the tcu. swi counter is decremented either when this register is written (any data) or curintnumber read is n.  n = 0, ..., 15</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>5</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>RIREGISTER</spirit:name>
<spirit:description>RI Register</spirit:description>
<spirit:addressOffset>0X0440</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RIR</spirit:name>
<spirit:description>rir  this is an 8-bit register with each bit representing a separate register mirq. if a bit is set, a further attempt to set it triggers an overflow error by the register interrupt carry status register and ri_eirq interrupt.  each bit is reset by writing to the ri status register with the equivalent bit set in the write data.  when this register is written to, any bits set in the data value sets the corresponding bit in the register. these flags are cleared via the ri carry register.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>8</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>XSWICOUNT</spirit:name>
<spirit:description>Cross-Assert Interrupt Count Register</spirit:description>
<spirit:addressOffset>0X0460</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>XSWIC</spirit:name>
<spirit:description>cross-assert interrupt count  number of pending (received) cross-asserted interrupts. it is incremented on a cross-assertion from the other irqctrl instance and decremented when the curintnumber read is 24.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>5</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>XSWIASSERT</spirit:name>
<spirit:description>Cross-Assert Interrupt Assert Register</spirit:description>
<spirit:addressOffset>0X0464</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>XSWIA</spirit:name>
<spirit:description>cross-assert interrupt assert  when written to (any value), an interrupt is cross-asserted. this is seen by the other instance of the irqctrl module and reflected by an increment in its xswi count register.  when read, this register reads back zero when it is safe for it to be written to.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>IRQSTATCTL</spirit:name>
<spirit:description>IRQ Status Control Register</spirit:description>
<spirit:addressOffset>0X0468</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>IRQSTATCTRL</spirit:name>
<spirit:description>irq status control  bit 0 of this register is a rw bit and can be used to enable or disable the nirq interrupt output of the module.  when set to 0, the nirq output is forced to an inactive state (active low signal).  bit 1 is a read-only bit that reflects the state of the internal nirq pending signal (the nirq output prior to the interrupt enabling gate).  this is intended mainly for debug.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>STIKY_CLR0</spirit:name>
<spirit:description>AIRQ Interrupt Clear 0 Register</spirit:description>
<spirit:addressOffset>0X08F8</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>AIRQ_AIRQ_INT_CLR_0308</spirit:name>
<spirit:description>airq interrupt clear 0  to clear the interrupt sticky-bit, write 1.  there is no need to write 0, since the register clears itself (one-shot).  when level interrupt function is selected, these registers have no effect.  bit [0] refers to interrupt 0, bit [1] refers to interrupt 1, etc.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>STIKY_CLR1</spirit:name>
<spirit:description>AIRQ Interrupt Clear 1 Register</spirit:description>
<spirit:addressOffset>0X08FC</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>AIRQ_AIRQ_INT_CLR_1316</spirit:name>
<spirit:description>airq interrupt clear 1  to clear the interrupt sticky-bit, write 1.  there is no need to write 0, since the register clears itself (one-shot).  when level interrupt function is selected, these registers have no effect.  bit [0] refers to interrupt 32, bit [1] refers to interrupt 33, etc.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>EDGE_OR_LEVEL0</spirit:name>
<spirit:description>AIRQ Interrupt Sensitivity 0 Register</spirit:description>
<spirit:addressOffset>0X08F0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>AIRQ_AIRQ_EDGE_LEVEL_0324</spirit:name>
<spirit:description>airq edge level 0  0 = originally level-sensitive interrupt (no sticky bit needed)  1 = originally edge-sensitive interrupt (sticky bit needed)  bit [0] refers to interrupt 0, bit [1] refers to interrupt 1, etc.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>EDGE_OR_LEVEL1</spirit:name>
<spirit:description>AIRQ Interrupt Sensitivity 1 Register</spirit:description>
<spirit:addressOffset>0X08F4</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>AIRQ_AIRQ_EDGE_LEVEL_1332</spirit:name>
<spirit:description>airq edge level 1  0 = originally level-sensitive interrupt (no sticky bit needed)  1 = originally edge-sensitive interrupt (sticky bit needed)  bit [0] refers to interrupt 32, bit [1] refers to interrupt 33, and so on.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
</spirit:addressBlock>
</spirit:memoryMap>
</spirit:memoryMaps>
</spirit:component>