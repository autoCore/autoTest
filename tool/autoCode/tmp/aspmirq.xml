<?xml version="1.0" encoding="UTF-8"?>
	<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
		<spirit:vendor>org.example</spirit:vendor>
		<spirit:library>example_lib</spirit:library>
		<spirit:name>aspmirq</spirit:name>
		<spirit:version>example_version</spirit:version>
<spirit:memoryMaps>
<spirit:memoryMap>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>RDL Example Registers</spirit:displayName>
<spirit:addressBlock>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>ASR Module Registers</spirit:displayName>
<spirit:description>This address map contains some example registers to show how RDL can be utilized in various situations.</spirit:description>
<spirit:baseAddress>0xFFA03800</spirit:baseAddress>
<spirit:range>0x2000</spirit:range>
<spirit:width>32</spirit:width>
<spirit:usage> </spirit:usage>
<spirit:volatile>true</spirit:volatile>
<spirit:register>
<spirit:name>MIRQ_INT_CLRnn</spirit:name>
<spirit:description>MIRQ Interrupt Clear n Register</spirit:description>
<spirit:addressOffset>0X0000</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MIRQ_INT_CLR</spirit:name>
<spirit:description>1 = the sticky-bit is held in reset   to clear the interrupt sticky-bit, write 1 and then 0.   when level interrupt function is selected, these registers have no effect.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>MIRQ_EDGE_LEVEL_LO24</spirit:name>
<spirit:description>MIRQ Low-24 Interrupt Sensitivity Register</spirit:description>
<spirit:addressOffset>0X00F8</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MIRQ_EDGE_LEVEL_LO24</spirit:name>
<spirit:description>0 = originally level-sensitive interrupt (no sticky bit needed)   1 = originally edge-sensitive interrupt (sticky bit needed)   bit [0] refers to interrupt 0, and bit [23] refers to interrupt 23.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>24</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>MIRQ_EDGE_LEVEL_HI24</spirit:name>
<spirit:description>MIRQ Hi-24 Interrupt Sensitivity Register</spirit:description>
<spirit:addressOffset>0X00FC</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MIRQ_EDGE_LEVEL_HI24</spirit:name>
<spirit:description>0 = originally level-sensitive interrupt (no sticky bit needed)   1 = originally edge-sensitive interrupt (sticky bit needed)   bit [0] refers to interrupt 24, and bit [23] refers to interrupt 47.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>24</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
</spirit:addressBlock>
</spirit:memoryMap>
</spirit:memoryMaps>
</spirit:component>