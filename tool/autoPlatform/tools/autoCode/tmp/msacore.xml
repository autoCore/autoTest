<?xml version="1.0" encoding="UTF-8"?>
	<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
		<spirit:vendor>org.example</spirit:vendor>
		<spirit:library>example_lib</spirit:library>
		<spirit:name>msacore</spirit:name>
		<spirit:version>example_version</spirit:version>
<spirit:memoryMaps>
<spirit:memoryMap>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>RDL Example Registers</spirit:displayName>
<spirit:addressBlock>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>ASR Module Registers</spirit:displayName>
<spirit:description>This address map contains some example registers to show how RDL can be utilized in various situations.</spirit:description>
<spirit:baseAddress>0xFFE00000</spirit:baseAddress>
<spirit:range>0x2000</spirit:range>
<spirit:width>32</spirit:width>
<spirit:usage> </spirit:usage>
<spirit:volatile>true</spirit:volatile>
<spirit:register>
<spirit:name>DMEM_CONTROL</spirit:name>
<spirit:description>Data Memory Control Register</spirit:description>
<spirit:addressOffset>0X0004</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>WB_ORDER</spirit:name>
<spirit:description>wb order  this field sets ordering for the system data write buffer.  1 = all entries corresponding to the system data port are taken from write buffer in fifo order. all entries corresponding to the aspec port are taken from the write buffer in fifo order. ordering between aspec and system data port is not preserved.  0 = all entries are taken from write buffer in fifo order</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ENDCPLB</spirit:name>
<spirit:description>enable data cplb (dcplb)  if the dcplb is enabled, a dcplb entry must be defined for all l1 and l2 pages that will be accessed by the data memory controller. cacheability and protection attributes for all data memory pages revert to defaults if the dcplb is disabled.  1 = enable dcplb  0 = disable dcplb</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ENDCACHE</spirit:name>
<spirit:description>enable l1 data cache  if enabled, the data cache caches data accessed from any memory pages that are described by the dcplb as cacheable.  1 = enable data cache  0 = disable data cache</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DATA_FAULT_STATUS</spirit:name>
<spirit:description>Data Fault Status Register</spirit:description>
<spirit:addressOffset>0X0008</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>FAULT_WB</spirit:name>
<spirit:description>fault wb  this fault occurs when an access is performed to a region where a cplb entry describes the region to be cacheable with write-back policy, yet the region does not support a victim line flush mode.  for msa, the only system port that supports a cache victim line is the l2sram port. therefore, this fault is caused by any access that occurs under all of the following conditions:  read or write access  the address is within a region other than the l2 data sram, the l1 data sram, or any of the core mmr, system mmr, or aspec mmr regions.  a valid cplb lookup is performed for the access, and the region is defined to be cacheable with a write-back policy.</spirit:description>
<spirit:bitOffset>21</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FAULT_TESTSET</spirit:name>
<spirit:description>fault testset  the testset instruction was performed to a device or address space that does not support the instruction.  for msa, testset is not supported to any address. therefore, any testset operation executed results in this error.</spirit:description>
<spirit:bitOffset>20</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FAULT_ILLADDR</spirit:name>
<spirit:description>fault illaddr  1 = attempted access to non-existent memory  0 = no fault</spirit:description>
<spirit:bitOffset>19</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FAULT_DAG</spirit:name>
<spirit:description>fault dag  1 = access was made by dag1  0 = access was made by dag0</spirit:description>
<spirit:bitOffset>18</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FAULT_USERSUPV</spirit:name>
<spirit:description>fault usersupv  1 = access was made in supervisor mode  0 = access was made in user mode</spirit:description>
<spirit:bitOffset>17</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FAULT_READWRITE</spirit:name>
<spirit:description>fault readwrite  1 = access was write  0 = access was read</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FAULT15:0</spirit:name>
<spirit:description>cplb fault  each bit indicates that the cplb associated with that bit has faulted. dcplb0 fault sets fault0, dcplb15 fault sets fault15. multiple hit faults will set all corresponding dcplb bits.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DATA_FAULT_ADDR</spirit:name>
<spirit:description>Data Fault Addr Register</spirit:description>
<spirit:addressOffset>0X000C</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>FAULT_ADDR</spirit:name>
<spirit:description>fault addr  address of the data access that caused the last precise data fault.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DCPLB_ADDR</spirit:name>
<spirit:description>Data CPLB Address Register</spirit:description>
<spirit:addressOffset>0X0100</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>PAGE_BASE44</spirit:name>
<spirit:description>page base  base address for the page described by this dplb entry.  the number of bits actually used to compare to transaction address depends on the size of the regions defined in the &lt;page size&gt; field in the data cplb data register mmr within the same dcplb entry.  for example, if &lt;page size&gt; is 4 mb, then bits 31:22 are compared and the lower bits 21:10 are ignored to force alignment to a 4 mb region.</spirit:description>
<spirit:bitOffset>14</spirit:bitOffset>
<spirit:bitWidth>18</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DCPLB_DATA</spirit:name>
<spirit:description>Data CPLB Data Register</spirit:description>
<spirit:addressOffset>0X0200</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>PAGE_SIZE53</spirit:name>
<spirit:description>page size  size of memory page described with this descriptor. the base address of this page as described by the corresponding data cplb address register must be naturally aligned to the page size. for example, the base address of a 4 mb page must be a multiple of 4 mb.  0x5 = 128 kb page size  0x4 = 16 kb page size  0x3 = 4 mb page size  0x2 = 1 mb page size  all other field values are reserved.</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_WT</spirit:name>
<spirit:description>cplb wt  determines whether writes to this memory page are performed using write-through or write-back policy.  1 = write-through  0 = write-back  in write-back mode, a write-allocate policy is used, meaning the corresponding line is fetched first if not already cached, then the write is performed directly to the line in cache. a dirty line is written back to a lower memory level only when the line is a victim of cache replacement or when explicitly flushed by software.  in write-through mode, a no-write-allocate policy is used, meaning that if a line being written is not present in the cache, it is not fetched before the write is performed. if the line is present in the cache, the write is performed to the cache. the write transaction propagates to the system whether the line is cached or not. the cache line never becomes dirty.  this bit is meaningful only when the page is also cacheable (&lt;cplb_l1_chbl&gt; = 1).</spirit:description>
<spirit:bitOffset>14</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_L1_CHBL57</spirit:name>
<spirit:description>cplb l1 chbl  1 = cacheable in l1  0 = non-cacheable in l1  regardless of this bit setting, if the data cache is disabled, all memory is non-cacheable. if access is to a non-cacheable memory region, the access is treated non-cacheable.  software is responsible for flushing all lines in the associated memory page from cache before disabling this bit.  unexpected behavior can result if a valid line from this memory page exists in l1 cache when this bit is cleared.</spirit:description>
<spirit:bitOffset>12</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_NSPEC_LD</spirit:name>
<spirit:description>cplb nspec ld  determines whether the core issues a load to the system in a non-speculative manner.  1 = non-speculative  0 = speculative  by default, the core issues speculative loads to the system. this means that the instruction associated with the load operation cannot commit and can instead be reissued.  the core issues a load operation as early as possible in a speculative manner to improve performance. forcing behavior to be non-speculative has a negative effect on performance but can be required to guarantee the same load is not issued to the system more than once.  this behavior has address restrictions and cannot be applied to either l1 or l2 data sram or any mmr region. see section 7.2.7, speculative load access to destructive peripheral registers in the &lt;var product number&gt; datasheet for more information about this behavior and limitations.  this bit is ignored if the entry describes a page which does not support non-speculative loads.</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_DIRTY</spirit:name>
<spirit:description>cplb dirty  1 = dirty  0 = clean  hardware triggers a protection exception on a store access if the page is cacheable, not yet dirty, and the page is written in write-back mode (&lt;cplb l1 chbl&gt; = 1 and this field = 0 and &lt;cplb wt&gt; = 0). the exception service routine is responsible for setting this dirty bit.</spirit:description>
<spirit:bitOffset>7</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_SUPV_WR</spirit:name>
<spirit:description>cplb supv wr  1 = write access allowed in supervisor mode  0 = write access not allowed in supervisor mode. a protection violation exception occurs if write access is attempted in supervisor mode.</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_USER_WR</spirit:name>
<spirit:description>cplb user wr  1 = write access allowed in user mode  0 = write access not allowed in user mode. a protection violation exception occurs if write access is attempted in user mode.</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_USER_RD63</spirit:name>
<spirit:description>cplb user rd  1 = read access allowed in user mode  0 = read access not allowed in user mode. a protection violation exception occurs if access to this page is attempted in user mode.</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_LOCK64</spirit:name>
<spirit:description>cplb lock  1 = lock entry  0 = entry can be replaced  the cplb replacement routine uses this bit to determine which entry to replace. user must make sure that not all entries are locked. this bit has no effect on hardware.</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_VALID65</spirit:name>
<spirit:description>cplb valid  1 = valid entry  0 = invalid entry  hardware can use this bit to turn off comparators to save power.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTEST_COMMAND_SRAM</spirit:name>
<spirit:description>DTEST Command Register (when accessing SRAM)</spirit:description>
<spirit:addressOffset>0X0300</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ISRAM_ADDR73</spirit:name>
<spirit:description>dsram_addr[20:3]  the 21-bit address is used as an offset into the l1 data sram or l2 data sram. this field aligned to 64-bit double word boundary (the lower 3 bits are 0x0).  exceeding the range of the l1 data sram results in undefined behavior (that is, only bits 16:0 are useful.).  set this offset to at least 0x10000 because the sram base addresses is located at 0xcfe00000 even though the sram data memory begins from 0xcfe10000.  example  to access the second dsram 64-bit word, set the offset to 0x10008.</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>18</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SRAM_SEL</spirit:name>
<spirit:description>sram select  1 = access l1 data sram  0 = access l2 data sram</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RW_CMD75</spirit:name>
<spirit:description>rw_cmd  performs a read or write access.  1 = write access  0 = read access</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SC_SEL76</spirit:name>
<spirit:description>sc_sel  selects either sram or cache access.  1 = access sram  0 = access cache</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTEST_COMMAND_CACHE</spirit:name>
<spirit:description>DTEST Command Register (when accessing cache data array or cache tag array)</spirit:description>
<spirit:addressOffset>0X0300</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>WAY_IDX84</spirit:name>
<spirit:description>way index  selects one of four ways.  0x3 = access way3  0x2 = access way2  0x1 = access way1  0x0 = access way0</spirit:description>
<spirit:bitOffset>26</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>BANK_IDX86</spirit:name>
<spirit:description>bank index  select one of four banks.  0x3 = access bank 3  0x2 = access bank 2  0x1 = access bank 1  0x0 = access bank 0</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SET_IDX88</spirit:name>
<spirit:description>set index  selects one of 32 sets.</spirit:description>
<spirit:bitOffset>5</spirit:bitOffset>
<spirit:bitWidth>5</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DW_IDX89</spirit:name>
<spirit:description>double word index  selects one of four 64-bit double words in a 256-bit line.</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DT_SEL91</spirit:name>
<spirit:description>dt_sel  selects either data or tag cache array access.  1 = access data array  0 = access tag array</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RW_CMD92</spirit:name>
<spirit:description>rw_cmd  performs a read or write access.  1 = write access  0 = read access</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SC_SEL93</spirit:name>
<spirit:description>sc_sel  selects either sram or cache access.  1 = access sram  0 = access cache</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTESTDATA1_SRAM</spirit:name>
<spirit:description>DTEST DATA1 Register (when accessing SRAM or cache data array)</spirit:description>
<spirit:addressOffset>0X0404</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DATA63:32100</spirit:name>
<spirit:description>data[63:32]  upper 32-bits of a 64-bit cache or sram double-word access</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTESTDATA1_CACHE</spirit:name>
<spirit:description>DTEST DATA1 Register (when accessing cache tag array)</spirit:description>
<spirit:addressOffset>0X0404</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>DTESTDATA0_SRAM_CACHE_DATA</spirit:name>
<spirit:description>DTEST DATA0 Register (when accessing SRAM or cache data array)</spirit:description>
<spirit:addressOffset>0X0400</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DATA31:0114</spirit:name>
<spirit:description>data[31:0]  lower 32-bits of a 64-bit cache or sram double-word access</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DTESTDATA0_CACHE_TAG</spirit:name>
<spirit:description>DTEST DATA0 Register (when accessing cache tag array)</spirit:description>
<spirit:addressOffset>0X0400</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>TAG13:2122</spirit:name>
<spirit:description>tag[13:2]</spirit:description>
<spirit:bitOffset>14</spirit:bitOffset>
<spirit:bitWidth>12</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TAG1:0124</spirit:name>
<spirit:description>tag[1:0]</spirit:description>
<spirit:bitOffset>10</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>WB</spirit:name>
<spirit:description>wb mode  1 = wb  0 = not wb</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>LRU5:0127</spirit:name>
<spirit:description>lru[5:0]  see table a.2, definition of cache lru bits, on page 224 for the definition of this field</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DIRTY</spirit:name>
<spirit:description>dirty  1 = dirty  0 = clean</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>VALID129</spirit:name>
<spirit:description>valid  1 = line is valid  0 = line is not valid</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>DMEM_TESTMODE</spirit:name>
<spirit:description>DMEM Test Mode Register</spirit:description>
<spirit:addressOffset>0X0500</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MSACO_138</spirit:name>
<spirit:description>reserved, bob's secrets</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>IMEM_CONTROL</spirit:name>
<spirit:description>Instruction Memory Control Register</spirit:description>
<spirit:addressOffset>0X1004</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ENICPLB</spirit:name>
<spirit:description>enable instruction cplb (icplb)  if the icplb is enabled, an icplb entry must be defined for all l1 and l2 pages that will be accessed by the instruction memory controller. cacheability and protection attributes for all instruction memory pages revert to defaults if the icplb is disabled.  1 = enable icplb  0 = disable icplb</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ENICACHE</spirit:name>
<spirit:description>enable l1 instruction cache (icache)  if enabled, the icache caches instruction fetches to any memory pages that are described by the icplb as cacheable.  1 = enable icache  0 = disable icache</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ICPLB_ADDR</spirit:name>
<spirit:description>Instruction CPLB Address Register</spirit:description>
<spirit:addressOffset>0X1100</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>PAGE_BASE154</spirit:name>
<spirit:description>page base  base address for the page described by this icplb entry.  the number of bits actually used to compare to transaction address depends on the size of the regions defined in the &lt;page size&gt; field in the instruction cplb data register mmr within the same icplb entry.  for example, if &lt;page size&gt; is 4 mb, then bits 31:22 are compared and the lower bits 21:10 are ignored to force alignment to a 4 mb region.</spirit:description>
<spirit:bitOffset>10</spirit:bitOffset>
<spirit:bitWidth>22</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ICPLB_DATA</spirit:name>
<spirit:description>Instruction CPLB Data Register</spirit:description>
<spirit:addressOffset>0X1200</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>PAGE_SIZE163</spirit:name>
<spirit:description>page size  size of memory page described with this descriptor. the base address of this page as described by the corresponding icplb_addr register must be naturally aligned to the page size. for example, the base address of a 4 mb page must be a multiple of 4 mb.  0x5 = 128 kb page size  0x4 = 16 kb page size  0x3 = 4 mb page size  0x2 = 1 mb page size  0x1 = 4 kb page size  0x0 = 1 kb page size  all other field values are reserved.</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_L1_CHBL165</spirit:name>
<spirit:description>cplb l1 chbl  1 = cacheable in l1  0 = non-cacheable in l1  regardless of this bit setting, if the instruction cache is disabled, all memory is non-cacheable. if access is to a non-cacheable memory region, the access is treated non-cacheable.  software is responsible for flushing all lines in the associated memory page from cache before disabling this bit. unexpected behavior can result if a valid line from this memory page exists in l1 cache when this bit is cleared.</spirit:description>
<spirit:bitOffset>12</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_USER_RD167</spirit:name>
<spirit:description>cplb user rd  1 = read access allowed in user mode  0 = read access not allowed in user mode. a protection violation exception occurs if instruction fetch access to this page is attempted in user mode.</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_LOCK168</spirit:name>
<spirit:description>cplb lock  1 = lock entry  0 = entry can be replaced  the cplb replacement routine uses this bit to determine which entry to replace. user must make sure that not all entries are locked. this bit has no effect on hardware.</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>CPLB_VALID169</spirit:name>
<spirit:description>cplb valid  1 = valid entry  0 = invalid entry  hardware can use this bit to turn off comparators to save power.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ITEST_COMMAND_SRAM</spirit:name>
<spirit:description>ITEST Command Register (when accessing SRAM)</spirit:description>
<spirit:addressOffset>0X1300</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ISRAM_ADDR177</spirit:name>
<spirit:description>isram_addr[14:3]  the 15-bit address is an offset into the instruction sram, aligned to 64-bit double word boundary (the lower 3 bits are 0x0).</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>12</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RW_CMD179</spirit:name>
<spirit:description>rw_cmd  performs a read or write access.  1 = write access  0 = read access</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SC_SEL180</spirit:name>
<spirit:description>sc_sel  selects either sram or cache access.  1 = access sram  0 = access cache</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ITEST_COMMAND_CACHE</spirit:name>
<spirit:description>ITEST Command Register (when accessing cache data array or cache tag array)</spirit:description>
<spirit:addressOffset>0X1300</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>WAY_IDX188</spirit:name>
<spirit:description>way index  selects one of four ways.  0x3 = access way3  0x2 = access way2  0x1 = access way1  0x0 = access way0</spirit:description>
<spirit:bitOffset>26</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>BANK_IDX190</spirit:name>
<spirit:description>bank index  selects one of four banks.  0x3 = access bank 3  0x2 = access bank 2  0x1 = access bank 1  0x0 = access bank 0</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SET_IDX192</spirit:name>
<spirit:description>set index  selects one of 32 sets.</spirit:description>
<spirit:bitOffset>5</spirit:bitOffset>
<spirit:bitWidth>5</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DW_IDX193</spirit:name>
<spirit:description>double word index  selects one of four 64-bit double words in a 256-bit line.</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DT_SEL195</spirit:name>
<spirit:description>dt_sel  selects either data or tag cache array access.  1 = access data array  0 = access tag array</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RW_CMD196</spirit:name>
<spirit:description>rw_cmd  perform a read or write access.  1 = write access  0 = read access</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SC_SEL197</spirit:name>
<spirit:description>sc_sel  selects either sram or cache access.  1 = access sram  0 = access cache</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ITEST_DATA0_SRAM_CACHE_DATA</spirit:name>
<spirit:description>ITEST DATA0 Register (when accessing SRAM or cache data array)</spirit:description>
<spirit:addressOffset>0X1400</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DATA31:0204</spirit:name>
<spirit:description>data[31:0]  lower 32-bits of a 64-bit cache or sram double-word access</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ITEST_DATA0_CACHE_TAG</spirit:name>
<spirit:description>ITEST DATA0 Register (when accessing cache tag array)</spirit:description>
<spirit:addressOffset>0X1400</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>TAG13:2212</spirit:name>
<spirit:description>tag[13:2]</spirit:description>
<spirit:bitOffset>14</spirit:bitOffset>
<spirit:bitWidth>12</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TAG1:0214</spirit:name>
<spirit:description>tag[1:0]</spirit:description>
<spirit:bitOffset>10</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>LRU5:0216</spirit:name>
<spirit:description>lru[5:0]  see table a.2, definition of cache lru bits, on page 224 for the definition of this field</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>VALID219</spirit:name>
<spirit:description>valid  1 = line is valid  0 = line is not valid</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ITEST_DATA1_SRAM_CACHE_DATA</spirit:name>
<spirit:description>ITEST DATA1 Register (when accessing SRAM or cache data array)</spirit:description>
<spirit:addressOffset>0X1404</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>DATA63:32226</spirit:name>
<spirit:description>data[63:32]  upper 32-bits of a 64-bit cache or sram double-word access</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>ITEST_DATA1_CACHE_TAG</spirit:name>
<spirit:description>ITEST DATA1 Register (when accessing cache tag array)</spirit:description>
<spirit:addressOffset>0X1404</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
</spirit:register>
<spirit:register>
<spirit:name>IMEM_TESTMODE</spirit:name>
<spirit:description>IMEM Test Mode Register</spirit:description>
<spirit:addressOffset>0X1500</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MSACO_242</spirit:name>
<spirit:description>reserved, bob's secrets</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>16</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
</spirit:addressBlock>
</spirit:memoryMap>
</spirit:memoryMaps>
</spirit:component>