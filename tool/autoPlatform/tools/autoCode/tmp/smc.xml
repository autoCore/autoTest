<?xml version="1.0" encoding="UTF-8"?>
	<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
		<spirit:vendor>org.example</spirit:vendor>
		<spirit:library>example_lib</spirit:library>
		<spirit:name>smc</spirit:name>
		<spirit:version>example_version</spirit:version>
<spirit:memoryMaps>
<spirit:memoryMap>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>RDL Example Registers</spirit:displayName>
<spirit:addressBlock>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>ASR Module Registers</spirit:displayName>
<spirit:description>This address map contains some example registers to show how RDL can be utilized in various situations.</spirit:description>
<spirit:baseAddress>0xD4283800</spirit:baseAddress>
<spirit:range>0x2000</spirit:range>
<spirit:width>32</spirit:width>
<spirit:usage> </spirit:usage>
<spirit:volatile>true</spirit:volatile>
<spirit:register>
<spirit:name>SMC_MSCx</spirit:name>
<spirit:description>Static Memory Control Registers</spirit:description>
<spirit:addressOffset>0X20</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>WE_GEN</spirit:name>
<spirit:description>we_genx is a programmable number of external clock cycles that varies for each interface setup and memory type. consult the &lt;var product number&gt; datasheet for specific usage based on memory type.</spirit:description>
<spirit:bitOffset>30</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>WE_D_HO</spirit:name>
<spirit:description>we_d_hox is a programmable number of external clock cycles that indicates data hold cycles after df_wen latching the data. consult the &lt;var product number&gt; datasheet for detailed usage.</spirit:description>
<spirit:bitOffset>25</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>WE_D_SU</spirit:name>
<spirit:description>we_d_sux is a programmable number of external clock cycles that indicates df_wen data setup before df_wen latches the data. consult the &lt;var product number&gt; datasheet for specific usage.</spirit:description>
<spirit:bitOffset>22</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>WE_LEN</spirit:name>
<spirit:description>we_lenx is a programmable number of external clock cycles that indicates the length of the df_wen latch. consult the &lt;var product number&gt; datasheet for detailed usage.</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>OE_GEN</spirit:name>
<spirit:description>oe_genx is a programmable number of external clock cycles that varies for each memory type and interface. consult the &lt;var product number&gt; datasheet for specific usage based on memory type.</spirit:description>
<spirit:bitOffset>14</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>OE_HO</spirit:name>
<spirit:description>oe_hox is a programmable number of external clock cycles that indicates df_oen signal hold. consult the &lt;var product number&gt; datasheet for detailed usage.</spirit:description>
<spirit:bitOffset>12</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>OE_SU</spirit:name>
<spirit:description>oe_sux is a programmable number of external clock cycles that indicates df_oen signal setup. consult the &lt;var product number&gt; datasheet for detailed usage.</spirit:description>
<spirit:bitOffset>9</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>OE_D_HO</spirit:name>
<spirit:description>oed_hox is a programmable number of external clock cycles that indicates data hold during read. consult the &lt;var product number&gt; datasheet for detailed usage.</spirit:description>
<spirit:bitOffset>6</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>OE_D_SU</spirit:name>
<spirit:description>oel_d_sux is a programmable number of external clock cycles that indicates data hold during read. consult the &lt;var product number&gt; datasheet for detailed usage.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_SXCNFGx</spirit:name>
<spirit:description>Synchronous Static Memory Control Registers</spirit:description>
<spirit:addressOffset>0X30</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SXWA</spirit:name>
<spirit:description>frequency code for csxn  access time for synchronous write only  the number of external sclk cycles between latching of the address and latching of the data.  0x0 to 0x2 = reserved  0x3 = 3 clocks   0x4 = 4 clocks   0x5 = 5 clocks   0x6 = 6 clocks  0x7 = 7 clocks  0x8 = 8 clocks  0x9 = 9 clocks  0xa = 10 clocks   0xb to 0xf = reserved</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SXRA</spirit:name>
<spirit:description>frequency code for csxn  access time for synchronous reads only  the number of external sclk cycles between latching of the address and latching of the data.  0x0 to 0x2 = reserved  0x3 = 3 clocks (frequency code configuration = 2)  0x4 = 4 clocks (frequency code configuration = 3)  0x5 = 5 clocks (frequency code configuration = 4)  0x6 = 6 clocks (frequency code configuration = 5)  0x7 = 7 clocks (frequency code configuration = 6)  0x8 = 8 clocks (frequency code configuration = 7)  0x9 = 9 clocks (frequency code configuration = 8)  0xa = 10 clocks (frequency code configuration = 9)  0xb to 0xf = reserved</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_MEMCLKCFG</spirit:name>
<spirit:description>Clock Configuration Control Register</spirit:description>
<spirit:addressOffset>0X68</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>CKEN</spirit:name>
<spirit:description>clock output enable enables the output clock df_sclk output  0 = df_sclk output is not enabled  1 = df_sclk output is enabled</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_CSDFICFGx</spirit:name>
<spirit:description>DFI Configuration Control Register for Chip Selects</spirit:description>
<spirit:addressOffset>0X90</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ALTS</spirit:name>
<spirit:description>address latch timing setup  used to set the setup timing for an address to be valid on the data bus for the luan/df_advn and llan signals, timings are identical for both signals.  0x0 = no setup is provided. the address is sent out at the same time as the luan/df_advn signal is asserted.  0x1 = one df_sclk cycles of setup is provided (such that the address is maintained for one df_sclk before the assertion of the luan/df_advn signal).  0x2 = two df_sclk cycles of setup are provided  0x3 = reserved</spirit:description>
<spirit:bitOffset>30</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ALTH</spirit:name>
<spirit:description>address latch timing hold  used to set the timing for an address to be valid on the data bus for the luan/df_advn and llan signals, timings are identical for both signals.  0x0 = no hold is provided. the address is removed at the same time as the lxan/df_advn signal is de-asserted.  0x1 = one df_sclk of hold is provided (such that the address is maintained for one df_sclk beyond the de-assertion of the lxan/df_advn signal).  0x2 = two df_sclk cycles of hold are provided.  0x3 = reserved  for asynchronous nor flash, hold time is in general required on the address so 0x1 or 0x2 are normally required.  for synchronous reads and writes, an extra cycle(s) of hold will not affect the latency to the read or write. the latency is the address valid signal latched to valid data on the bus.</spirit:description>
<spirit:bitOffset>28</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ALW</spirit:name>
<spirit:description>address latch width  used to set the width of the luan/df_advn and llan signals on the dfi, timings are identical for both signals.  the encoding here is the number of cycles of external df_sclks that the luan/df_advn signal is asserted.  0x0 = no latch signals will be generated for address cycle, regardless of the values for &lt;address latch timing setup&gt; and &lt;address latch timing hold&gt;, address will be sent on the address lines as the cs is issued, as an example, this could be used in the lower address selection for a small size memory that does not need the higher address values, or in non muxed mode of operation with an sram.  0x1 = one df_sclk cycle width of luan/df_advn and llan  0x2 = two df_sclk cycles width of luan/df_advn and llan  0x3 = three df_sclk cycles width of luan/df_advn and llan  0x4 = four df_sclk cycles width of luan/df_advn and llan  0x5 = five df_sclk cycles width of luan/df_advn and llan  0x6 = six df_sclk cycles width of luan/df_advn and llan  0x7 = seven df_sclk cycles width of luan/df_advn and llan</spirit:description>
<spirit:bitOffset>24</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RDY_SPEC4</spirit:name>
<spirit:description>rdy_spec[4] - active polarity  0 = active low  1 = active high</spirit:description>
<spirit:bitOffset>23</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RDY_SPEC3</spirit:name>
<spirit:description>rdy_spec[3] - cycle assertion (consider frequency and delay when set)  0 = set same cycle  1 = set previous cycle</spirit:description>
<spirit:bitOffset>22</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RDY_SPEC2_1</spirit:name>
<spirit:description>rdy_spec[2:1] - usage  0x0 = rdy not used  0x1 = rdy used for read only  0x2 = rdy used for write only  0x3 = rdy used for read and write</spirit:description>
<spirit:bitOffset>20</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RDY_SPEC0</spirit:name>
<spirit:description>rdy_spec[0] - signal synchronization  0 = rdy signal is synchronized to local logic  1 = rdy asynchronous, internal synchronizer used (2-stage)</spirit:description>
<spirit:bitOffset>19</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ADDRBASE</spirit:name>
<spirit:description>address base  for relevant chip select, the least significant address to be sent out as part of the low-order address. setting this field to 0x1 is the guideline to follow:  0x0 = byte address bit [0]  0x1 = byte address bit [1] (thus half word address)  0x2 to 0x3 = reserved</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>WRSYNC</spirit:name>
<spirit:description>control use of synchronized interface during the write cycle  0x0 = asynchronous write   0x1 = synchronous write   0x2 = asynchronous write cycle df_wen toggles each beat of burst   0x3 to 0x7 = reserved</spirit:description>
<spirit:bitOffset>12</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RDSYNC</spirit:name>
<spirit:description>control use of synchronized interface during the read cycle  0x0 = asynchronous read cycle df_oen does not toggle within burst  0x1 = synchronous read cycle df_oen does toggle   0x2 = asynchronous read cycle df_oen toggles each beat of burst (vlio)  0x3 to 0x7 = reserved</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>LOWADD</spirit:name>
<spirit:description>low address setup  controls low order special operations on the address bus.  0x0 = low order addressing operation not enabled, non-muxed mode  0x1 = 4-bit low-order addressing in operation for both a/d and aa/d  0x2 = 6-bit low-order addressing in operation for both a/d and aa/d  0x3 = 8-bit low-order addressing in operation for both a/d and aa/d  0x4 = 10-bit low-order addressing in operation for both a/d and aa/d  0x5 = 12-bit low-order addressing in operation for a/d only   0x5 = 11-bit low-order addressing in operation for aa/d only  0x6 to 0x7 = reserved  refer to supported memory types section for more information.</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RBW</spirit:name>
<spirit:description>memory bus width  0 = 8 bits  1 = 16 bits</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ADDMODE</spirit:name>
<spirit:description>addressing type cs[3:0]n are used only on the dfi.  0x0 = a/d address data muxing mode  0x1 = aa/d address data muxing mode (default)  0x2 = non-muxed address data interface  0x3 to 0x7 = reserved</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_CLK_RET_DEL</spirit:name>
<spirit:description>Synchronous NOR Flash Clock Return Delay Register</spirit:description>
<spirit:addressOffset>0XB0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>FLOP_SEL</spirit:name>
<spirit:description>flop select  1 = use flop_clk (delayed dfi_clock) clocked df_io[15:0] input, llan, df_advn, rdy  0 = use delayed df_io[15:0] input, llan, df_advn, rdy</spirit:description>
<spirit:bitOffset>25</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RDY_DLY_VAL</spirit:name>
<spirit:description>rdy delay value  this field is used for the number of (delay element) rdy delay to controller.</spirit:description>
<spirit:bitOffset>20</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>DIN_DLY_VAL</spirit:name>
<spirit:description>din delay value  this field is used for the number of (delay element) din delay to controller.</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>LLA_DLY_VAL</spirit:name>
<spirit:description>lla delay value  this field is used for the number of (delay element) lla delay to device.</spirit:description>
<spirit:bitOffset>12</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ADV_DLY_VAL</spirit:name>
<spirit:description>adv delay value  this field is used for the number of (delay element) adv delay to device.</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SCLK_DLY_VAL</spirit:name>
<spirit:description>dfi_clk out delay value  this field is used for the number of (delay element) dfi_clk out delay to device.</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>FLOP_CLK_DLY_VAL</spirit:name>
<spirit:description>dfi_clk delay value  this field is used for the number of (delay element) dfi_clk delay when used as flop clock.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SCLK_DELAY_1</spirit:name>
<spirit:description>df_sclk delay 1  this is the second delay on the df_sclk signal for returning the df_sclk to flop the control and data.</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_ADV_RET_DEL</spirit:name>
<spirit:description>Synchronous NOR Flash ADVn Return Delay Register</spirit:description>
<spirit:addressOffset>0XB4</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ADVN_SEL</spirit:name>
<spirit:description>determines which delayed advn to send back to the smc.  0x0 = use advn with no delay  0x1 = use advn out of one delay element  0x2 = use advn out of two delay elements  0x3 = reserved</spirit:description>
<spirit:bitOffset>6</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ADVN_DEL_1</spirit:name>
<spirit:description>this is the second delay on the df_nadv_r signal returning from the pads.</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>ADVN_DEL_0</spirit:name>
<spirit:description>each delay element used has a 3-bit input to select the amount of delay the output will see. two of these delay elements are used in series. this is to delay the returned flopped control signal back to the smc. this is the first delay on the df_nadv_r signal returning from the pads.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_CSADRMAPx</spirit:name>
<spirit:description>Address Mapping Control Registers</spirit:description>
<spirit:addressOffset>0XC0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MEMUSED</spirit:name>
<spirit:description>used to indicate a memory device is occupying the space as defined by the &lt;start address bits&gt; and &lt;memory size&gt; space  0 = no memory is present at space specified by &lt;start address bits&gt; and &lt;memory size&gt;  1 = memory is present at space specified by &lt;start address bits&gt; and &lt;memory size&gt;</spirit:description>
<spirit:bitOffset>28</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>STADD</spirit:name>
<spirit:description>start address bits  this field is used to set the start address of the csxn. default values are:  cs[0]n stadd0 = 0x00 = default for cs[0]n start address is 0x8000_0000  cs[1]n stadd1 = 0x10 = default for cs[1]n start address is 0x9000_0000  cs[2]n stadd2 = 0x20 = default for cs[2]n start address is 0xa000_0000  cs[3]n stadd3 = 0x30 = default for cs[3]n start address is 0xb000_0000</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>MEMSIZE</spirit:name>
<spirit:description>memory size  0x0 = 16 mb  0x1 = 32 mb  0x2 = 48 mb  0x3 = 64 mb  0x4 = 80 mb  0x5 = 96 mb  0x6 = 112 mb  0x7 = 128 mb  0x8 = 144 mb  0x9 = 160 mb  0xa = 176 mb  0xb = 192 mb  0xc = 208 mb  0xd = 224 mb  0xe = 240 mb  0xf = 256 mb (default value)</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>WR_START</spirit:name>
<spirit:description>write start address within the axi bus width  0 = start address aligned to received value (aligned to memory data width)  1 = start address aligned to axi width</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RD_START</spirit:name>
<spirit:description>read start address within the axi bus width  0 = start address aligned to received value (aligned to memory data width)  1 = start address aligned to axi width</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_TCVCFGREG</spirit:name>
<spirit:description>Transceiver Configuration Control Register 0</spirit:description>
<spirit:addressOffset>0XD0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>TCVCS3EN</spirit:name>
<spirit:description>transceiver enable for chip select 3  used to enable or disable the use of the transceiver on device set on chip select 3  0 = transceiver not enabled on cs[3]n  1 = transceiver enabled on cs[3]n</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TCVCS2EN</spirit:name>
<spirit:description>transceiver enable for chip select 2  used to enable or disable the use of the transceiver on device set on chip select 2  0 = transceiver not enabled on cs[2]n  1 = transceiver enabled on cs[2]n</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TCVCS1EN</spirit:name>
<spirit:description>transceiver enable for chip select 1  used to enable or disable the use of the transceiver on device set on chip select 1  0 = transceiver not enabled on cs[1]n  1 = transceiver enabled on cs[1]n</spirit:description>
<spirit:bitOffset>1</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>TCVCS0EN</spirit:name>
<spirit:description>transceiver enable for chip select 0  used to enable or disable the use of the transceiver on device set on chip select 0  0 = transceiver not enabled on cs[0]n  1 = transceiver enabled on cs[0]n</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_WE_Apx</spirit:name>
<spirit:description>DF_WEn Address Phase Control Registers</spirit:description>
<spirit:addressOffset>0XE0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>WE_AP_VAL</spirit:name>
<spirit:description>we_ap_val[11] - value of df_wen during high address setup for write  we_ap_val[10] - value of df_wen during high address setup for read  we_ap_val[9] - value of df_wen during high address width for write  we_ap_val[8] - value of df_wen during high address width for read  we_ap_val[7] - value of df_wen during high address hold for write  we_ap_val[6] - value of df_wen during high address hold for read  we_ap_val[5] - value of df_wen during low address setup for write  we_ap_val[4] - value of df_wen during low address setup for read  we_ap_val[3] - value of df_wen during low address width for write  we_ap_val[2] - value of df_wen during low address width for read  we_ap_val[1] - value of df_wen during low address hold for write  we_ap_val[0] - value of df_wen during low address hold for read</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>12</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_OE_Apx</spirit:name>
<spirit:description>DF_OEn Address Phase Control Registers</spirit:description>
<spirit:addressOffset>0XF0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>OE_AP_VAL</spirit:name>
<spirit:description>oe_ap_val[11] - value of df_oen during high address setup for write  oe_ap_val[10] - value of df_oen during high address setup for read  oe_ap_val[9] - value of df_oen during high address width for write  oe_ap_val[8] - value of df_oen during high address width for read  oe_ap_val[7] - value of df_oen during high address hold for write  oe_ap_val[6] - value of df_oen during high address hold for read  oe_ap_val[5] - value of df_oen during low address setup for write  oe_ap_val[4] - value of df_oen during low address setup for read  oe_ap_val[3] - value of df_oen during low address width for write  oe_ap_val[2] - value of df_oen during low address width for read  oe_ap_val[1] - value of df_oen during low address hold for write  oe_ap_val[0] - value of df_oen during low address hold for read</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>12</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_ADV_Apx</spirit:name>
<spirit:description>DF_ADVn Address Phase Control Registers</spirit:description>
<spirit:addressOffset>0X100</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ADV_AP_VAL</spirit:name>
<spirit:description>adv_ap_val[11] - value of df_oen during high address setup for write  adv_ap_val[10] - value of df_oen during high address setup for read  adv_ap_val[9] - value of df_oen during high address width for write  adv_ap_val[8] - value of df_oen during high address width for read  adv_ap_val[7] - value of df_oen during high address hold for write  adv_ap_val[6] - value of df_oen during high address hold for read  adv_ap_val[5] - value of df_oen during low address setup for write  adv_ap_val[4] - value of df_oen during low address setup for read  adv_ap_val[3] - value of df_oen during low address width for write  adv_ap_val[2] - value of df_oen during low address width for read  adv_ap_val[1] - value of df_oen during low address hold for write  adv_ap_val[0] - value of df_oen during low address hold for read</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>12</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_WE_DPx</spirit:name>
<spirit:description>DF_WEn Data Phase Value Control Registers</spirit:description>
<spirit:addressOffset>0X110</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>WE_DP_VAL</spirit:name>
<spirit:description>we_dp_val[23] reserved  we_dp_val[22] reserved  we_dp_val[21] reserved  we_dp_val[20] reserved  we_dp_val[19] reserved  we_dp_val[18] value of df_wen in wr_sync_g state  we_dp_val[17] value of df_wen in wr_sync_wait state  we_dp_val[16] value of df_wen in wr_sync_wr_data state  we_dp_val[15] value of df_wen in wr_sync_access_time state  we_dp_val[14] value of df_wen in rd_sync_g state  we_dp_val[13] value of df_wen in rd_sync_wait state  we_dp_val[12] value of df_wen in rd_sync_rd_data state  we_dp_val[11] value of df_wen in rd_sync_access_time state  we_dp_val[10] value of df_wen in rd_sync_oe_s state  we_dp_val[9] value of df_wen in wr_asnc_g state  we_dp_val[8] value of df_wen in wr_asnc_d_h state  we_dp_val[7] value of df_wen in wr_asnc_we state  we_dp_val[6] value of df_wen in wr_asnc_d state  we_dp_val[5] value of df_wen in rd_asnc_g state  we_dp_val[4] value of df_wen in rd_asnc_oe_h state  we_dp_val[3] value of df_wen in rd_asnc_d_h state  we_dp_val[2] value of df_wen in rd_asnc_d_s state  we_dp_val[1] value of df_wen in rd_asnc_oe_s state  we_dp_val[0] value of df_wen for all other state states</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>24</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EN_WE_CON</spirit:name>
<spirit:description>0 = use we default values for data phase  1 = use we values defined in we_dp_val for data phase</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_OE_Apx</spirit:name>
<spirit:description>DF_OEn Data Phase Value Control Registers</spirit:description>
<spirit:addressOffset>0X120</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>OE_DP_VAL</spirit:name>
<spirit:description>oe_dp_val[23] reserved   oe_dp_val[22] reserved  oe_dp_val[21] reserved   oe_dp_val[20] reserved   oe_dp_val[19] reserved   oe_dp_val[18] value of df_oen in wr_sync_g state  oe_dp_val[17] value of df_oen in wr_sync_wait state  oe_dp_val[16] value of df_oen in wr_sync_wr_data state  oe_dp_val[15] value of df_oen in wr_sync_access_time state  oe_dp_val[14] value of df_oen in rd_sync_g state  oe_dp_val[13] value of df_oen in rd_sync_wait state  oe_dp_val[12] value of df_oen in rd_sync_rd_data state  oe_dp_val[11] value of df_oen in rd_sync_access_time state  oe_dp_val[10] value of df_oen in rd_sync_oe_s state  oe_dp_val[9] value of df_oen in wr_asnc_g state  oe_dp_val[8] value of df_oen in wr_asnc_d_h state  oe_dp_val[7] value of df_oen in wr_asnc_we state  oe_dp_val[6] value of df_oen in wr_asnc_d state  oe_dp_val[5] value of df_oen in rd_asnc_g state  oe_dp_val[4] value of df_oen in rd_asnc_oe_h state  oe_dp_val[3] value of df_oen in rd_asnc_d_h state  oe_dp_val[2] value of df_oen in rd_asnc_d_s state  oe_dp_val[1] value of df_oen in rd_asnc_oe_s state  oe_dp_val[0] value of df_oen for all other state states</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>24</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EN_OE_CON</spirit:name>
<spirit:description>1b0 = use oe default values for data phase  1 = use oe values defined in oe_dp_val for data phase</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_TCVENx</spirit:name>
<spirit:description>Transceiver Enable Value Registers</spirit:description>
<spirit:addressOffset>0X130</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>TCVEN_VAL</spirit:name>
<spirit:description>we_dp_val[25] reserved   we_dp_val[24] value of xcvrenn in high address state setup  we_dp_val[23] value of xcvrenn in high address state width  we_dp_val[22] value of xcvrenn in high address state hold  we_dp_val[21] value of xcvrenn in low address state setup  we_dp_val[20] value of xcvrenn in low address state width  tcven_val[19] value of xcvrenn in low address state hold   tcven_val[18] value of xcvrenn in wr_sync_g state  tcven_val[17] value of xcvrenn in wr_sync_wait state  tcven_val[16] value of xcvrenn in wr_sync_wr_data state  tcven_val[15] value of xcvrenn in wr_sync_access_time state  tcven_val[14] value of xcvrenn in rd_sync_g state  tcven_val[13] value of xcvrenn in rd_sync_wait state  tcven_val[12] value of xcvrenn in rd_sync_rd_data state  tcven_val[11] value of xcvrenn in rd_sync_access_time state  tcven_val[10] value of xcvrenn in rd_sync_oe_s state  tcven_val[9] value of xcvrenn in wr_asnc_g state  tcven_val[8] value of xcvrenn in wr_asnc_d_h state  tcven_val[7] value of xcvrenn in wr_asnc_we state  tcven_val[6] value of xcvrenn in wr_asnc_d state  tcven_val[5] value of xcvrenn in rd_asnc_g state  tcven_val[4] value of xcvrenn in rd_asnc_oe_h state  tcven_val[3] value of xcvrenn in rd_asnc_d_h state  tcven_val[2] value of xcvrenn in rd_asnc_d_s state  tcven_val[1] value of xcvrenn in rd_asnc_oe_s state  tcven_val[0] value of xcvrenn for all other state states</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>26</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EN_TCVEN_CON</spirit:name>
<spirit:description>1b0 = use oe default values for data phase  1 = use oe values defined in tcven_val for all states</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SMC_TCVENx</spirit:name>
<spirit:description>Address Valid (ADV) Value Registers</spirit:description>
<spirit:addressOffset>0X40</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>ADV_VAL</spirit:name>
<spirit:description>we_dp_val[25] reserved   we_dp_val[24] value of df_advn in high address state setup  we_dp_val[23] value of df_advn in high address state width  we_dp_val[22] value of df_advn in high address state hold  we_dp_val[21] value of df_advn in low address state setup  we_dp_val[20] value of df_advn in low address state width  tcven_val[19] value of df_advn in low address state hold   tcven_val[18] value of df_advn in wr_sync_g state  tcven_val[17] value of df_advn in wr_sync_wait state  tcven_val[16] value of df_advn in wr_sync_wr_data state  tcven_val[15] value of df_advn in wr_sync_access_time state  tcven_val[14] value of df_advn in rd_sync_g state  tcven_val[13] value of df_advn in rd_sync_wait state  tcven_val[12] value of df_advn in rd_sync_rd_data state  tcven_val[11] value of df_advn in rd_sync_access_time state  tcven_val[10] value of df_advn in rd_sync_oe_s state  tcven_val[9] value of df_advn in wr_asnc_g state  tcven_val[8] value of df_advn in wr_asnc_d_h state  tcven_val[7] value of df_advn in wr_asnc_we state  tcven_val[6] value of df_advn in wr_asnc_d state  tcven_val[5] value of df_advn in rd_asnc_g state  tcven_val[4] value of df_advn in rd_asnc_oe_h state  tcven_val[3] value of df_advn in rd_asnc_d_h state  tcven_val[2] value of df_advn in rd_asnc_d_s state  tcven_val[1] value of df_advn in rd_asnc_oe_s state  tcven_val[0] value of df_advn for all other state states</spirit:description>
<spirit:bitOffset>4</spirit:bitOffset>
<spirit:bitWidth>26</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EN_ADV_CON</spirit:name>
<spirit:description>0 = use oe default values for data phase  1 = use oe values defined in adv_val for all states</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
</spirit:addressBlock>
</spirit:memoryMap>
</spirit:memoryMaps>
</spirit:component>