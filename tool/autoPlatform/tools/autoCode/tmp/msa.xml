<?xml version="1.0" encoding="UTF-8"?>
	<spirit:component xmlns:kactus2="http://funbase.cs.tut.fi/" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.5/index.xsd">
		<spirit:vendor>org.example</spirit:vendor>
		<spirit:library>example_lib</spirit:library>
		<spirit:name>msa</spirit:name>
		<spirit:version>example_version</spirit:version>
<spirit:memoryMaps>
<spirit:memoryMap>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>RDL Example Registers</spirit:displayName>
<spirit:addressBlock>
<spirit:name>some_register_map</spirit:name>
<spirit:displayName>ASR Module Registers</spirit:displayName>
<spirit:description>This address map contains some example registers to show how RDL can be utilized in various situations.</spirit:description>
<spirit:baseAddress>0xFFD06000</spirit:baseAddress>
<spirit:range>0x2000</spirit:range>
<spirit:width>32</spirit:width>
<spirit:usage> </spirit:usage>
<spirit:volatile>true</spirit:volatile>
<spirit:register>
<spirit:name>SMMLR</spirit:name>
<spirit:description>System MMR Maximum Latency Register</spirit:description>
<spirit:addressOffset>0X0</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SMMAX</spirit:name>
<spirit:description>system mmr maximum latency  number of cycles after which the system mmr bus will time out if there is no response from a system mmr.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SDTESR</spirit:name>
<spirit:description>System Data Transaction Error Status Register</spirit:description>
<spirit:addressOffset>0X4</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>MS_RW32</spirit:name>
<spirit:description>indicates whether the most recent error condition was a read or a write operation. if sdet indicates no error, this field is undefined.  1 = read  0 = write</spirit:description>
<spirit:bitOffset>3</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>SDET</spirit:name>
<spirit:description>system data port error type  indicates the type of error which occurred on the system data port. this field must be cleared by writing any value to this register before this register can capture another error condition.  0x7 = gpb out-of-range error  0x6 = bus error (from ddr, or axi)  0x5 = illegal address error  0x4 = gpb illegal access size error  0x3 = gpb retry error  0x2 = smmr timeout error  0x1 = reserved  0x0 = no error</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>3</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>SDTEAR</spirit:name>
<spirit:description>System Data Transaction Error Address Register</spirit:description>
<spirit:addressOffset>0X8</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>SDTEAR</spirit:name>
<spirit:description>error address of the system data port transaction error indicated by sdtesr.   this register will only be updated once after each time the &lt;system data port error type&gt; field in the system data transaction error status register is reset to no error by writing any value to the system data transaction error status register.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>32</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>PBRCR</spirit:name>
<spirit:description>Peripheral Bus Retry Control Register</spirit:description>
<spirit:addressOffset>0X1000</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>RTODIS</spirit:name>
<spirit:description>retry timeout disable  if this bit is set, rc will be ignored, causing the bus to retry forever and never issue an error.  1 = ignore rc and instead retry indefinitely.  0 = observe rc</spirit:description>
<spirit:bitOffset>31</spirit:bitOffset>
<spirit:bitWidth>1</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>RC</spirit:name>
<spirit:description>maximum retry count  the number of times that the bus will retry a peripheral access before issuing an error.  this field may have a value between 0 and 255. a value of 0 means that no retry will be attempted before an error is generated.</spirit:description>
<spirit:bitOffset>8</spirit:bitOffset>
<spirit:bitWidth>8</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>MS_RP64</spirit:name>
<spirit:description>maximum retry period  this specifies the number of clocks the bridge will wait before attempting to retry the transaction.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>8</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>PBDESR</spirit:name>
<spirit:description>Peripheral Bus DMA Error Status Register</spirit:description>
<spirit:addressOffset>0X1004</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>PBTP</spirit:name>
<spirit:description>transaction port  indicates which dma controller experienced the last error. this field has no meaning if pbdet indicates &lt;q&gt;no error&lt;/q&gt;.  0x3 = reserved  0x2 = dma c2  0x1 = dma c1  0x0 = reserved</spirit:description>
<spirit:bitOffset>2</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>PBDET</spirit:name>
<spirit:description>type of the last peripheral bus dma error. out of range error is caused when a transaction exceeds the address range represented by the peripheral bus. retry error is caused when a peripheral fails to respond in the maximum number of retry periods specified in the pbrcr register. if this field indicates no error, the meaning of the pbtp field is undefined.  this field must be cleared to indicate no error by writing any value to this register before this register can capture another error condition.  0x3 = reserved  0x2 = out of range error  0x1 = retry error  0x0 = no error</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>AWCR</spirit:name>
<spirit:description>ASPEC Wait Count Register</spirit:description>
<spirit:addressOffset>0X2000</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>IWC</spirit:name>
<spirit:description>internal wait count  number of core cycles from the beginning of the aspec bus transaction that the aspec bus will capture data from its &lt;q&gt;internal device&lt;/q&gt; region. valid values are from 1 to 15 wait states. a value of 0 will result in undefined behavior.</spirit:description>
<spirit:bitOffset>16</spirit:bitOffset>
<spirit:bitWidth>4</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
<spirit:field>
<spirit:name>EWC</spirit:name>
<spirit:description>external wait count  number of core cycles from the beginning of the aspec bus transaction that the aspec bus will capture data from its &lt;q&gt;external device&lt;/q&gt; region.   valid values are from 1 to 63 wait states. a value of 0 will cause undefined behavior.   an additional wait signal will optionally allow an external peripheral to extend the wait states until a timeout condition is reached.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>6</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>AWTCR</spirit:name>
<spirit:description>ASPEC Wait Timeout Control Register</spirit:description>
<spirit:addressOffset>0X2004</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>EWTO</spirit:name>
<spirit:description>external wait timeout  if the external device wait signal is asserted after the ewc counter expires, the bus will wait up to an additional ewto core cycles before terminating the transaction with a timeout error.</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>10</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
<spirit:register>
<spirit:name>AAHCR</spirit:name>
<spirit:description>ASPEC Access Hold Control Register</spirit:description>
<spirit:addressOffset>0X2008</spirit:addressOffset>
<spirit:size>32</spirit:size>
<spirit:volatile>true</spirit:volatile>
<spirit:access>read-write</spirit:access>
<spirit:reset>
<spirit:value>0</spirit:value>
<spirit:mask>0xffffffff</spirit:mask>
</spirit:reset>
<spirit:field>
<spirit:name>AH</spirit:name>
<spirit:description>address hold for both read and write  0x3 = 4 cycles  0x2 = 3 cycles  0x1 = 2 cycles  0x0 = 1 cycle</spirit:description>
<spirit:bitOffset>0</spirit:bitOffset>
<spirit:bitWidth>2</spirit:bitWidth>
<spirit:access>read-write</spirit:access>
</spirit:field>
</spirit:register>
</spirit:addressBlock>
</spirit:memoryMap>
</spirit:memoryMaps>
</spirit:component>