1:How to run this scripts:
	Open the terminal, execute ./find_excel_list.py, if it report "Permission error", pls
	using the "sodu ./find_excel_list.py", if it report the others(error), pls check the excel file.

	Pls put the register excel file in the ./excel folder, and execute this scripts, the result head file
	is located in ./tmp folder.

	Now, Maybe there is something wrong in the headfile because we have not the unified register definition format
	in the excel. But we can copy the right format headfile and refer to others.

	There are four file which is clock_parse_excel.py and clock_parse_main.py, clock_generate_reg_struct.py,
	clock_generate_struct.py, they are use to parse clock.xls and generate clock code.

	clock_parse_excel.py has many useful functions such as parse clock parent and frequency, but it can't execute alone.
	clock_parse_main.py is the main file, execute this scripts as ./clock_parse_main.py <clock.xls>, it will call
	clock_parse_excel.py. the results will save to the aquila_clock_module.h
	clock_generate_*.py is used to generate clock code related to register. the results will save to the aquila_clock_reg.h

    +-----------------------------+   +----------------------+
    | clock_parse_main.py         |   |                      |
    | clock_generate_reg_struct.py|   | clock_parse_excel.py |
    | clock_generate_struct.py    |   |                      |
    +-----------------------------+   +----------------------+
               |             [FILE]              |
    ~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~
               V           [PROCESSES]           |
    +---------------------+                      V
    |  open clock.xls     |           +--------------------------+
    +---------------------+   +-----> | parse_excel_clock_source |
               |              |       +--------------------------+
               |              |
    +---------------------+   |       +--------------------------+
    | parse clock source  |---+-----> | parse_excel_clock_parent |
    +---------------------+   |       +--------------------------+
               |              |
               |              |       +--------------------------+
               |              +-----> | parse_excel_clock_factor |
               |              |       +--------------------------+
               |              |
               |              |       +--------------------------+
               |              +-----> |   clk_is_number_clock    |
               V                      +--------------------------+
    +---------------------+
    | generate clock dict |
    +---------------------+
               |
    ~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               |            [OUTPUT]
               V
    +---------------------+
    |  output to console  |
    +---------------------+


	There are three files used to verify module registers.they are reg_verify.py, xml_parser.py, xml_file.py.

	[reg_verify.py]:the main functional test scripts.
	It get reg structure of each module and verify register bits according to different type.
	you can run it with command: python reg_verify.py

	[xml_file.py]:use to specify the directory of register xml files.

	[xml_parser.py]:use to parser the xml file and output the structure of regs.

2:How to clean the workspace:
	Because the python scripts will create some tmp file, you can execute "./clean.sh" to clean these tmp file.


3:Before run this script, pls install some python lib.
	sudo apt-get install python-setuptools
	sudo easy_install xlrd
	sudo easy_install xlwt
	sudo easy_install xlutils
	sudo easy_install pip

4:Requirements about excel
  1)For registers file:
	a),Bits format is (31:8) format
	b),Please make sure the String in Field(code) to simple and continuation, for exmaple, DMA_ENABLE, It is wrong "sleep sel[0]"
	c),For multi-registers's offset , pls use this style: "Offset: 'Cluster 0' L1 0x1B8. 'Cluster 1' L2 0x1BC. "Cluster 2" 0x1cc."
	d),Base:TSEN_BASE 0xD4013300 is correct.
